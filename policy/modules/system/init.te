policy_module(init)

gen_require(`
	class passwd rootok;
')

########################################
#
# Declarations
#

## <desc>
## <p>
## Enable support for upstart as the init program.
## </p>
## </desc>
gen_tunable(init_upstart, false)

## <desc>
## <p>
## Allow all daemons the ability to read/write terminals
## </p>
## </desc>
gen_tunable(init_daemons_use_tty, false)

## <desc>
## <p>
## Enable systemd to mount on all non-security files.
## </p>
## </desc>
gen_tunable(init_mounton_non_security, false)

attribute init_mountpoint_type;
attribute init_path_unit_loc_type;
attribute init_script_domain_type;
attribute init_script_file_type;
attribute init_run_all_scripts_domain;
attribute init_linkable_keyring_type;
attribute systemdunit;
attribute initrc_transition_domain;

# Mark process types as daemons
attribute daemon;
attribute systemprocess;

# Mark file type as a daemon pid file
attribute daemonpidfile;

#
# init_t is the domain of the init process.
#
type init_t, initrc_transition_domain;
type init_exec_t;
domain_type(init_t)
domain_entry_file(init_t, init_exec_t)
kernel_domtrans_to(init_t, init_exec_t)
role r types init_t;

#
# init_runtime_t is the type for /var/run/shutdown.pid and /var/run/systemd.
#
type init_runtime_t alias init_var_run_t;
files_runtime_file(init_runtime_t)
init_mountpoint(init_runtime_t)

#
# init_var_lib_t is the type for /var/lib/systemd.
#
type init_var_lib_t;
files_type(init_var_lib_t)

#
# initctl_t is the type of the named pipe created
# by init during initialization.  This pipe is used
# to communicate with init.
#
type initctl_t;
files_type(initctl_t)
mls_trusted_object(initctl_t)

type initrc_t, init_script_domain_type, init_run_all_scripts_domain;
type initrc_exec_t, init_script_file_type;
init_domain(initrc_t, initrc_exec_t)

ifdef(`enable_mcs', `
	init_ranged_daemon_domain(initrc_t, initrc_exec_t, s0)
')

ifdef(`enable_mls', `
	init_ranged_daemon_domain(initrc_t, initrc_exec_t, s0 - mls_systemhigh)
')

init_named_socket_activation(initrc_t, init_runtime_t)
# should be part of the true block
# of the below init_upstart tunable
# but this has a typeattribute in it
corecmd_shell_entry_type(initrc_t)

type initrc_devpts_t;
term_pty(initrc_devpts_t)
files_type(initrc_devpts_t)

type initrc_lock_t;
files_lock_file(initrc_lock_t)

type initrc_runtime_t alias initrc_var_run_t;
files_runtime_file(initrc_runtime_t)

type initrc_state_t;
files_type(initrc_state_t)

type initrc_tmp_t;
files_tmp_file(initrc_tmp_t)

type init_tmpfs_t;
files_tmpfs_file(init_tmpfs_t)

type systemd_unit_t;
init_unit_file(systemd_unit_t)

ifdef(`enable_mls',`
	kernel_ranged_domtrans_to(init_t, init_exec_t, s0 - mls_systemhigh)
')

########################################
#
# Init local policy
#

# Use capabilities. old rule:
allow init_t self:capability { chown dac_override dac_read_search fowner fsetid kill setgid setuid setpcap linux_immutable net_bind_service net_broadcast net_admin net_raw ipc_lock ipc_owner sys_rawio sys_chroot sys_ptrace sys_pacct sys_admin sys_boot sys_nice sys_resource sys_time sys_tty_config mknod lease audit_write audit_control setfcap };
allow init_t self:capability2 { wake_alarm block_suspend };
# is ~sys_module really needed? observed:
# sys_boot
# sys_tty_config
# kill: now provided by domain_kill_all_domains()
# setuid (from /sbin/shutdown)
# sys_chroot (from /usr/bin/chroot): now provided by corecmd_chroot_exec_chroot()

allow init_t self:fifo_file rw_fifo_file_perms;

# Re-exec itself
can_exec(init_t, init_exec_t)

allow init_t initrc_t:unix_stream_socket connectto;

# Mostly for systemd. Allow init to link to various keyrings
allow init_t init_linkable_keyring_type:key link;

# For /var/run/shutdown.pid.
allow init_t init_runtime_t:file manage_file_perms;
files_runtime_filetrans(init_t, init_runtime_t, file)

# for /run/initctl
allow init_t init_runtime_t:fifo_file manage_fifo_file_perms;

# for systemd to manage service file symlinks
allow init_t init_runtime_t:lnk_file manage_lnk_file_perms;

allow init_t initctl_t:fifo_file manage_fifo_file_perms;
dev_filetrans(init_t, initctl_t, fifo_file)
files_runtime_filetrans(init_t, initctl_t, fifo_file)

# Modify utmp.
allow init_t initrc_runtime_t:file { rw_file_perms setattr };

allow init_t init_tmpfs_t:file manage_file_perms;
fs_tmpfs_filetrans(init_t, init_tmpfs_t, file)

kernel_read_system_state(init_t)
kernel_share_state(init_t)
kernel_dontaudit_search_unlabeled(init_t)

corecmd_exec_chroot(init_t)
corecmd_exec_bin(init_t)

dev_read_sysfs(init_t)
# Early devtmpfs
dev_rw_generic_chr_files(init_t)

domain_getpgid_all_domains(init_t)
domain_kill_all_domains(init_t)
domain_getattr_all_domains(init_t)
domain_signal_all_domains(init_t)
domain_signull_all_domains(init_t)
domain_sigstop_all_domains(init_t)
domain_sigchld_all_domains(init_t)

files_read_etc_files(init_t)
files_mmap_read_kernel_modules(init_t)
files_rw_runtime_files(init_t)
files_manage_etc_runtime_files(init_t)
files_etc_filetrans_etc_runtime(init_t, file)
# Run /etc/X11/prefdm:
files_exec_etc_files(init_t)
# file descriptors inherited from the rootfs:
files_dontaudit_rw_root_files(init_t)
files_dontaudit_rw_root_chr_files(init_t)

fs_getattr_xattr_fs(init_t)
fs_list_inotifyfs(init_t)
# cjp: this may be related to /dev/log
fs_write_ramfs_sockets(init_t)

mcs_process_set_categories(init_t)

mls_file_read_all_levels(init_t)
mls_file_write_all_levels(init_t)
mls_process_write_all_levels(init_t)
mls_fd_use_all_levels(init_t)
mls_process_set_level(init_t)

# the following one is needed for libselinux:is_selinux_enabled()
# otherwise the call fails and sysvinit tries to load the policy
# again when using the initramfs
selinux_get_fs_mount(init_t)
selinux_set_all_booleans(init_t)

term_use_all_terms(init_t)

optional_policy(`
	modutils_read_module_config(init_t)
	modutils_read_module_deps(init_t)
')

########################################
#
# Init script local policy
#

allow initrc_t self:process { getpgid setsched setpgid setrlimit getsched };
allow initrc_t self:capability { chown dac_override dac_read_search fowner fsetid kill setgid setuid setpcap linux_immutable net_bind_service net_broadcast net_admin net_raw ipc_lock ipc_owner sys_rawio sys_chroot sys_ptrace sys_pacct sys_boot sys_nice sys_resource sys_time sys_tty_config mknod lease audit_write audit_control setfcap };
allow initrc_t self:capability2 { wake_alarm block_suspend };
dontaudit initrc_t self:capability sys_module; # sysctl is triggering this
allow initrc_t self:passwd rootok;
allow initrc_t self:key manage_key_perms;

# Allow IPC with self
allow initrc_t self:unix_dgram_socket create_socket_perms;
allow initrc_t self:unix_stream_socket { create listen accept ioctl read getattr write setattr append bind connect getopt setopt shutdown connectto };
allow initrc_t self:tcp_socket create_stream_socket_perms;
allow initrc_t self:udp_socket create_socket_perms;
allow initrc_t self:fifo_file rw_fifo_file_perms;

allow initrc_t initrc_devpts_t:chr_file rw_term_perms;
term_create_pty(initrc_t, initrc_devpts_t)

# Going to single user mode
init_telinit(initrc_t)

can_exec(initrc_t, init_script_file_type)

create_dirs_pattern(initrc_t, daemonpidfile, daemonpidfile)
manage_files_pattern(initrc_t, daemonpidfile, daemonpidfile)
setattr_dirs_pattern(initrc_t, daemonpidfile, daemonpidfile)

domtrans_pattern(init_run_all_scripts_domain, initrc_exec_t, initrc_t)

manage_dirs_pattern(initrc_t, initrc_state_t, initrc_state_t)
manage_files_pattern(initrc_t, initrc_state_t, initrc_state_t)
manage_lnk_files_pattern(initrc_t, initrc_state_t, initrc_state_t)
manage_fifo_files_pattern(initrc_t, initrc_state_t, initrc_state_t)

allow initrc_t initrc_runtime_t:file manage_file_perms;
files_runtime_filetrans(initrc_t, initrc_runtime_t, file)

allow initrc_t daemon:process siginh;

can_exec(initrc_t, initrc_tmp_t)
manage_files_pattern(initrc_t, initrc_tmp_t, initrc_tmp_t)
manage_dirs_pattern(initrc_t, initrc_tmp_t, initrc_tmp_t)
manage_lnk_files_pattern(initrc_t, initrc_tmp_t, initrc_tmp_t)
files_tmp_filetrans(initrc_t, initrc_tmp_t, { file dir })
allow initrc_t initrc_tmp_t:dir relabelfrom;

init_write_initctl(initrc_t)

kernel_read_system_state(initrc_t)
kernel_read_software_raid_state(initrc_t)
kernel_read_network_state(initrc_t)
kernel_read_ring_buffer(initrc_t)
kernel_change_ring_buffer_level(initrc_t)
kernel_clear_ring_buffer(initrc_t)
kernel_get_sysvipc_info(initrc_t)
kernel_read_all_sysctls(initrc_t)
kernel_rw_all_sysctls(initrc_t)
kernel_use_fds(initrc_t)
# for lsof which is used by alsa shutdown:
kernel_dontaudit_getattr_message_if(initrc_t)
# cjp: not sure why these are here; should use mount policy
kernel_list_unlabeled(initrc_t)
kernel_mounton_unlabeled_dirs(initrc_t)

files_create_lock_dirs(initrc_t)
files_manage_all_locks(initrc_t)
files_runtime_filetrans_lock_dir(initrc_t, "lock")
files_read_kernel_symbol_table(initrc_t)
files_setattr_lock_dirs(initrc_t)

corecmd_exec_all_executables(initrc_t)

corenet_all_recvfrom_netlabel(initrc_t)
corenet_tcp_sendrecv_all_if(initrc_t)
corenet_udp_sendrecv_all_if(initrc_t)
corenet_tcp_sendrecv_all_nodes(initrc_t)
corenet_udp_sendrecv_all_nodes(initrc_t)
corenet_tcp_connect_all_ports(initrc_t)
corenet_sendrecv_all_client_packets(initrc_t)

dev_read_rand(initrc_t)
dev_read_urand(initrc_t)
dev_dontaudit_read_kmsg(initrc_t)
dev_write_kmsg(initrc_t)
dev_write_rand(initrc_t)
dev_write_urand(initrc_t)
dev_rw_sysfs(initrc_t)
dev_list_usbfs(initrc_t)
dev_read_framebuffer(initrc_t)
dev_write_framebuffer(initrc_t)
dev_read_realtime_clock(initrc_t)
dev_read_sound_mixer(initrc_t)
dev_write_sound_mixer(initrc_t)
dev_setattr_generic_dirs(initrc_t)
dev_setattr_all_chr_files(initrc_t)
dev_rw_lvm_control(initrc_t)
dev_rw_generic_chr_files(initrc_t)
dev_delete_lvm_control_dev(initrc_t)
dev_manage_generic_symlinks(initrc_t)
# Wants to remove udev.tbl:
dev_delete_generic_symlinks(initrc_t)
dev_getattr_all_blk_files(initrc_t)
dev_getattr_all_chr_files(initrc_t)
dev_rw_xserver_misc(initrc_t)
dev_map_xserver_misc(initrc_t)

domain_kill_all_domains(initrc_t)
domain_signal_all_domains(initrc_t)
domain_signull_all_domains(initrc_t)
domain_sigstop_all_domains(initrc_t)
domain_sigchld_all_domains(initrc_t)
domain_read_all_domains_state(initrc_t)
domain_getattr_all_domains(initrc_t)
domain_getsession_all_domains(initrc_t)
domain_use_interactive_fds(initrc_t)
# for lsof which is used by alsa shutdown:
domain_dontaudit_getattr_all_udp_sockets(initrc_t)
domain_dontaudit_getattr_all_tcp_sockets(initrc_t)
domain_dontaudit_getattr_all_dgram_sockets(initrc_t)
domain_dontaudit_getattr_all_pipes(initrc_t)
domain_obj_id_change_exemption(initrc_t)

files_getattr_all_dirs(initrc_t)
files_getattr_all_files(initrc_t)
files_getattr_all_symlinks(initrc_t)
files_getattr_all_pipes(initrc_t)
files_getattr_all_sockets(initrc_t)
files_purge_tmp(initrc_t)
files_manage_boot_files(initrc_t)
files_read_all_runtime_files(initrc_t)
files_delete_root_files(initrc_t)
files_delete_runtime_symlinks(initrc_t)
files_delete_all_runtime_files(initrc_t)
files_delete_all_runtime_dirs(initrc_t)
files_delete_all_runtime_sockets(initrc_t)
files_delete_all_runtime_pipes(initrc_t)
files_read_etc_files(initrc_t)
files_manage_etc_runtime_files(initrc_t)
files_etc_filetrans_etc_runtime(initrc_t, file)
files_exec_etc_files(initrc_t)
files_read_usr_files(initrc_t)
files_manage_urandom_seed(initrc_t)
files_manage_generic_spool(initrc_t)
# Mount and unmount file systems.
# cjp: not sure why these are here; should use mount policy
files_list_default(initrc_t)
files_mounton_default(initrc_t)
files_manage_mnt_dirs(initrc_t)
files_manage_mnt_files(initrc_t)

fs_delete_cgroup_dirs(initrc_t)
fs_list_cgroup_dirs(initrc_t)
fs_rw_cgroup_files(initrc_t)
fs_list_inotifyfs(initrc_t)
fs_register_binary_executable_type(initrc_t)
# cjp: not sure why these are here; should use mount policy
fs_mount_all_fs(initrc_t)
fs_unmount_all_fs(initrc_t)
fs_remount_all_fs(initrc_t)
fs_getattr_all_fs(initrc_t)
fs_search_all(initrc_t)
fs_getattr_nfsd_files(initrc_t)

mcs_process_set_categories(initrc_t)

mls_file_read_all_levels(initrc_t)
mls_file_write_all_levels(initrc_t)
mls_process_read_all_levels(initrc_t)
mls_process_write_all_levels(initrc_t)
mls_rangetrans_source(initrc_t)
mls_fd_share_all_levels(initrc_t)
mls_socket_write_to_clearance(initrc_t)

selinux_get_enforce_mode(initrc_t)

storage_getattr_fixed_disk_dev(initrc_t)
storage_setattr_fixed_disk_dev(initrc_t)
storage_setattr_removable_dev(initrc_t)

term_use_all_terms(initrc_t)
term_reset_tty_labels(initrc_t)

init_get_system_status(initrc_t)
init_stream_connect(initrc_t)
init_start_all_units(initrc_t)
init_stop_all_units(initrc_t)

userdom_read_user_home_content_files(initrc_t)
# Allow access to the sysadm TTYs. Note that this will give access to the
# TTYs to any process in the initrc_t domain. Therefore, daemons and such
# started from init should be placed in their own domain.
userdom_use_inherited_user_terminals(initrc_t)

ifdef(`enable_mls',`
	optional_policy(`
		# allow init scripts to su
		su_restricted_domain_template(initrc, initrc_t, r)
	')
')

optional_policy(`
	modutils_read_module_deps(initrc_t)
')


optional_policy(`
	fs_write_ramfs_sockets(initrc_t)
	fs_search_ramfs(initrc_t)
')

optional_policy(`
	# bash tries to access a block device in the initrd
	kernel_dontaudit_getattr_unlabeled_blk_files(initrc_t)

	# for a bug in rm
	files_dontaudit_write_all_runtime_files(initrc_t)

	# bash tries ioctl for some reason
	files_dontaudit_ioctl_all_runtime_files(initrc_t)

')

optional_policy(`
	sysnet_read_dhcpc_state(initrc_t)
')

optional_policy(`
	udev_manage_runtime_files(initrc_t)
	udev_manage_runtime_dirs(initrc_t)
	udev_manage_rules_files(initrc_t)
')

########################################
#
# Rules applied to all daemons
#

domain_dontaudit_use_interactive_fds(daemon)

# daemons started from init will
# inherit fds from init for the console
term_dontaudit_use_console(daemon)

init_dontaudit_use_fds(daemon)
# init script ptys are the stdin/out/err
# when using run_init
init_use_script_ptys(daemon)

tunable_policy(`init_daemons_use_tty',`
	term_use_unallocated_ttys(daemon)
	term_use_generic_ptys(daemon)
	term_use_all_ttys(daemon)
	term_use_all_ptys(daemon)
',`
	term_dontaudit_use_unallocated_ttys(daemon)
	term_dontaudit_use_generic_ptys(daemon)
	term_dontaudit_use_all_ttys(daemon)
	term_dontaudit_use_all_ptys(daemon)
 ')

tunable_policy(`use_nfs_home_dirs',`
	fs_dontaudit_rw_nfs_files(daemon)
')

tunable_policy(`use_samba_home_dirs',`
	fs_dontaudit_rw_cifs_files(daemon)
')

optional_policy(`
	unconfined_dontaudit_rw_pipes(daemon)
	unconfined_dontaudit_rw_stream_sockets(daemon)
')

optional_policy(`
	userdom_dontaudit_rw_all_users_stream_sockets(daemon)
	userdom_dontaudit_read_user_tmp_files(daemon)
	userdom_dontaudit_write_user_tmp_files(daemon)
')

########################################
#
# Rules applied to all system processes
#

dontaudit systemprocess init_t:unix_stream_socket getattr;

optional_policy(`
	userdom_dontaudit_search_user_home_dirs(systemprocess)
	userdom_dontaudit_rw_all_users_stream_sockets(systemprocess)
	userdom_dontaudit_write_user_tmp_files(systemprocess)
')
